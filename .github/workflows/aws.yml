#此工作流将构建一个新的容器映像并将其推送到Amazon ECR，
#然后，当有推送到“主”分支时，将向Amazon ECS部署新的任务定义。
#
#要使用此工作流程，您需要完成以下设置步骤:
#
# 1.创建一个ECR存储库来存储您的图像。
#例如:` AWS ECR create-repository-repository-name my-ECR-repo-region us-east-2 `。
#用您的存储库名称替换下面工作流中“ECR_REPOSITORY”环境变量的值。
#将下面工作流中“AWS_REGION”环境变量的值替换为您的存储库区域。
#
# 2.创建ECS任务定义、ECS群集和ECS服务。
#例如，请遵循ECS控制台上的入门指南:
# https://us-east-2.console.aws.amazon.com/ecs/home?区域=美国东部-2 #/第一轮
#用您为Amazon ECS服务设置的名称替换以下工作流中“ECS_SERVICE”环境变量的值。
#用您为群集设置的名称替换下面工作流中“ECS_CLUSTER”环境变量的值。
#
# 3.将ECS任务定义作为JSON文件存储在存储库中。
#格式应遵循“AWS ECS register-task-definition-generate-CLI-skeleton”的输出。
#将下面工作流中“ECS_TASK_DEFINITION”环境变量的值替换为JSON文件的路径。
#用容器的名称替换下面工作流中“容器名”环境变量的值
#在任务定义的“容器定义”部分。
#
# 4.将IAM用户访问密钥存储在名为“AWS_ACCESS_KEY_ID”和“AWS_SECRET_ACCESS_KEY”的GitHub操作机密中。
#    See the documentation for each action used below for the recommended IAM policies for this IAM user,
#    and best practices on handling the access key credentials.

name: Deploy to Amazon ECS

on:
  push:
    branches: [ "main" ]

env:
  AWS_REGION: MY_AWS_REGION                   # set this to your preferred AWS region, e.g. us-west-1
  ECR_REPOSITORY: MY_ECR_REPOSITORY           # set this to your Amazon ECR repository name
  ECS_SERVICE: MY_ECS_SERVICE                 # set this to your Amazon ECS service name
  ECS_CLUSTER: MY_ECS_CLUSTER                 # set this to your Amazon ECS cluster name
  ECS_TASK_DEFINITION: MY_ECS_TASK_DEFINITION # set this to the path to your Amazon ECS task definition
                                               # file, e.g. .aws/task-definition.json
  CONTAINER_NAME: MY_CONTAINER_NAME           # set this to the name of the container in the
                                               # containerDefinitions section of your task definition

permissions:
  contents: read

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build a docker container and
        # push it to ECR so that it can
        # be deployed to ECS.
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ env.ECS_TASK_DEFINITION }}
        container-name: ${{ env.CONTAINER_NAME }}
        image: ${{ steps.build-image.outputs.image }}

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true
